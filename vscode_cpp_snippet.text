{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
		"CPPP": {
			"prefix": "cp",
			"body": [
				"// nc",
            "",
            "#include <bits/stdc++.h>",
            "",
            "using namespace std;",
            "",
            "using int = int64_t;",
            "",
            "#ifdef LOCAL",
            "#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
            "#else",
            "#define dbg(...)",
            "#endif",
            "",
            "void sol()",
            "{",
            "    $1",
            "}",
            "",
            "signed main(){",
            "    ios_base::sync_with_stdio(0);",
            "    cin.tie(0);",
            "    cout.tie(0);",
            "    int tc = 1;",
            "    cin >> tc;",
            "    for(int t = 1; t <= tc; t++){",
            "        // cout << \"Case #\" << t << \": \";",
            "        sol();",
            "        cout << \"\\n\";",
            "    }",
            "}",
            "",
            "// time : $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR | $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"
			],
			"description": "For competitive programming"
		},
        "CPPP1": {
			"prefix": "cpbig",
			"body": [
				"// nc",
            "",
            "#include <bits/stdc++.h>",
            "",
            "using namespace std;",
            "",
            "#define all(a) a.begin(), a.end()",
            "#define pb push_back",
            "#define eb emplace_back",
            "#define umap unordered_map",
            "#define mp make_pair",
            "#define maxar(arr) *max_element(all(arr))",
            "#define minar(arr) *min_element(all(arr))",
            "#define sumar(arr) accumulate(all(arr), 0)",
            "#define endl '\\n'",
            "#define gcd(a, b) __gcd(a, b)",
            "#define popc(a) __builtin_popcount(a)",
            "#define rng(i,a,b) for(int i=int(a);i<int(b);i++)",
            "#define rep(i,b) rng(i,0,b)",
            "#define gnr(i,a,b) for(int i=int(b)-1;i>=int(a);i--)",
            "#define per(i,b) gnr(i,0,b)",
            "#define fr first",
            "#define sc second",
            "#define bg begin()",
            "#define ed end()",
            "#define mt make_tuple",
            "",
            "template<class t> using vc=vector<t>;",
            "template<class t> using vvc=vc<vc<t>>;",
            "",
            "using vi  = vc<int>;",
            "using vvi = vc<vc<int>>;",
            "using ll  = long long;",
            "using i32 = int32_t;",
            "using u32 = unsigned int;",
            "using ull = unsigned long long;",
            "using ld  = long double;",
            "using pii = pair<int, int>;",
            "using i64 = int64_t;",
            "using ull = unsigned long long;",
            "",
            "#ifdef LOCAL",
            "#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
            "#else",
            "#define dbg(...)",
            "#endif",
            "",
            "void sol()",
            "{",
            "    $1",
            "}",
            "",
            "signed main(){",
            "    ios_base::sync_with_stdio(0);",
            "    cin.tie(0);",
            "    cout.tie(0);",
            "    int tc = 1;",
            "    cin >> tc;",
            "    for(int t = 1; t <= tc; t++){",
            "        // cout << \"Case #\" << t << \": \";",
            "        sol();",
            "        cout << \"\\n\";",
            "    }",
            "}",
            "",
            "// time : $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR | $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"
			],
			"description": "For competitive programming"
		},

		"bare minimum cpp programme": {
			"prefix": "nc",
			"body": [
				"// nc",
				"",
				"#include<bits/stdc++.h>",
            	"",
            	"using namespace std;",
            	"",
            	"int main(){",
				"	$1",
				"	return 0;",
            	"}",
				"", 
				"// time : $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR | $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			],
			"description": "normal"
		},
		"Random Number Generator with C++": {
        "prefix": "rnbg",
        "body": [
           "#include<bits/stdc++.h>",
            "",
            "using namespace std;",
            "",
            "int rnb(int a, int b){",
            "    if(a > b)",
            "        swap(a, b);",
            "    return a + rand() % (b - a + 1);",
            "}",
            "",
            "std::string gnrss(size_t size) {",
            "    // Define the character set",
            "    const std::string CHARACTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,~.'\\\\?!@#$%^&*(){}[]/<>+-=_|\";",
            "    const size_t CHARACTERS_LENGTH = CHARACTERS.length();",
            "",
            "    // Random device and engine initialization",
            "    std::random_device rd;",
            "    std::mt19937 generator(rd());",
            "    std::uniform_int_distribution<> distribution(0, CHARACTERS_LENGTH - 1);",
            "",
            "    // Generate the random string",
            "    std::string randomString;",
            "    for (size_t i = 0; i < size; ++i) {",
            "        randomString += CHARACTERS[distribution(generator)];",
            "    }",
            "",
            "    return randomString;",
            "}",
            "",
            "int main(int argc, char* argv[]){",
            "    srand(atoi(argv[1]));",
            "",
            "    //... rnb(a,b) to generate inputs in the range of a to b",
            "",
            "    //... Give the inputs here",
            "",
            "    $1",
            "}"
        ],
        "description": "Generates a random number generator code template in C++"
    },
		"leetcode": {
			"prefix": "lc",
			"body": [
					"// nc",
            "",
            "#include <bits/stdc++.h>",
            "",
            "using namespace std;",
            "",
            "#define all(a) a.begin(), a.end()",
            "#define pb push_back",
            "#define eb emplace_back",
            "#define umap unordered_map",
            "#define mp make_pair",
            "#define maxar(arr) *max_element(all(arr))",
            "#define minar(arr) *min_element(all(arr))",
            "#define sumar(arr) accumulate(all(arr), 0)",
            "#define gcd(a, b) __gcd(a, b)",
            "#define popc(a) __builtin_popcount(a)",
            "#define rng(i,a,b) for(int i=int(a);i<int(b);i++)",
            "#define rep(i,b) rng(i,0,b)",
            "#define gnr(i,a,b) for(int i=int(b)-1;i>=int(a);i--)",
            "#define per(i,b) gnr(i,0,b)",
            "#define fr first",
            "#define sc second",
            "#define bg begin()",
            "#define ed end()",
            "#define mt make_tuple",
            "",
            "template<class t> using vc=vector<t>;",
            "template<class t> using vvc=vc<vc<t>>;",
            "",
            "using vi  = vc<int>;",
            "using vvi = vc<vc<int>>;",
            "using ll  = long long;",
            "using i32 = int32_t;",
            "using u32 = unsigned int;",
            "using ull = unsigned long long;",
            "using ld  = long double;",
            "using pii = pair<int, int>;",
            "using i64 = int64_t;",
            "using ull = unsigned long long;",
            "",
            "#ifdef LOCAL",
            "#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
            "#else",
            "#define dbg(...)",
            "#endif",
            "",
            "auto init = []()",
            "{",
            "	ios::sync_with_stdio(0);",
            "	cin.tie(0);",
            "	cout.tie(0);",
            "	return 'c';",
            "}();",
            "",
            "// time : $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR | $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            "",
        ],
			"description": "For Lc and GFG"
		},
}
